from ast import expr_context
from binascii import a2b_hex
import gmpy2
import libnum
from Crypto.Util.number import long_to_bytes
import rsa

p =103169997616485551031464255470933912769138678486308606548829864832475286956352820777675906250888480758988042929926650778258645395390704539331044520540493914976918287837784167602592842294428320280077298441229677288804330809348542989572025647629197125774169660202933389503479875281255251708756136235980261002721
q = 118708356036556764867265898935113131396123603519706253638471947428629480632093167441071553617674910361583096018553489763264968315979600347227202213032200082234723932966271491293078658859991411078353786047057633062704705868496505010747527582221405270108531250109325039176750319760622713949424458520689137293093
e = 65537
c = 7452289103798793077695280417169419455166899701788901836734328155284739957725703294559430435103717320729650111554179307802466425440395009249676073483665440706798647037132729666567531235250930696928916715517814635114285584993316017358168840142715891235370969699037025285851393818308877470156970288072245494257783204219286929267254610734755131380439411294744543265526502113623373731011466745762574276043654138385178215058943331773948951832838630012210745419470596111338808224381556830581941343409140019735062104854628895647516786513885853749857584898509027997081419471042234127652413465022131369647282103361292021252058

# 已知的p和q求出n
n = p * q
# 根据已知的条件求出d
d = int(gmpy2.invert(e, (p - 1) * (q - 1)))
# 求出明文
m = pow(c, d, n)

print(libnum.n2s(int(m)))
print(long_to_bytes(m))

